//
// Autogenerated by `prisma-import`
// Any modifications will be overwritten on subsequent runs.
//

//
// _base.prisma
//

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//
// gender.prisma
//

model Gender {
  id     Int    @id @default(autoincrement())
  name   String
  status String

  User User[]

  @@map("genders")
}

//
// pronoun.prisma
//

model Pronoun {
  id     Int    @id @default(autoincrement())
  name   String
  status String

  User User[]

  @@map("pronouns")
}

//
// rank.prisma
//

model Rank {
  id     Int    @id @default(autoincrement())
  name   String
  order  Int
  status String

  User User[]

  @@map("ranks")
}

//
// social.prisma
//

model Social {
  id     Int    @id @default(autoincrement())
  name   String
  status String

  UserSocial UserSocial[]

  @@map("socials")
}

//
// user-social.prisma
//

model UserSocial {
  userId    Int
  socialId  Int
  url       String
  createdAt DateTime

  user   User   @relation(fields: [userId], references: [id])
  social Social @relation(fields: [socialId], references: [id])

  @@id([userId, socialId])
  @@map("userSocials")
}

//
// user.prisma
//

model User {
  id              Int       @id @default(autoincrement())
  firstName       String
  lastName        String
  email           String    @unique
  password        String
  dateBirth       DateTime
  genderId        Int
  createdAt       DateTime
  updatedAt       DateTime?
  howDidKnowHubi  String
  timeInCommunity String
  pronounId       Int
  riotId          String
  rankId          Int
  isAdmin         Boolean
  status          String

  gender  Gender       @relation(fields: [genderId], references: [id])
  pronoun Pronoun      @relation(fields: [pronounId], references: [id])
  rank    Rank         @relation(fields: [rankId], references: [id])
  socials UserSocial[]

  @@map("user")
}
