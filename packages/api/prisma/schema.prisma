//
// Autogenerated by `prisma-import`
// Any modifications will be overwritten on subsequent runs.
//

//
// _base.prisma
//

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//
// genders.prisma
//

model Genders {
  id     Int    @id @default(autoincrement())
  name   String
  status String

  Users Users[]

  @@map("genders")
}

//
// pronouns.prisma
//

model Pronouns {
  id     Int    @id @default(autoincrement())
  name   String
  status String

  Users Users[]

  @@map("pronouns")
}

//
// ranks.prisma
//

model Ranks {
  id     Int    @id @default(autoincrement())
  name   String
  status String

  Users Users[]

  @@map("ranks")
}

//
// socials.prisma
//

model Socials {
  id           Int            @id @default(autoincrement())
  name         String
  status       String
  UsersSocials UsersSocials[]

  @@map("socials")
}

//
// users-socials.prisma
//

model UsersSocials {
  id        Int      @id @default(autoincrement())
  userId    Int
  socialId  Int
  url       String
  createdAt DateTime
  status    Int

  user   Users   @relation(fields: [userId], references: [id])
  social Socials @relation(fields: [socialId], references: [id])

  @@map("usersSocials")
}

//
// users.prisma
//

model Users {
  id              Int       @id @default(autoincrement())
  firstName       String
  lastName        String
  email           String    @unique
  password        String
  dateBirth       DateTime
  genderId        Int
  createdAt       DateTime
  updatedAt       DateTime?
  howDidKnowHubi  String
  timeInCommunity String
  pronounId       Int
  riotId          String
  rankId          Int
  isAdmin         Boolean
  status          Int

  gender  Genders        @relation(fields: [genderId], references: [id])
  pronoun Pronouns       @relation(fields: [pronounId], references: [id])
  rank    Ranks          @relation(fields: [rankId], references: [id])
  socials UsersSocials[]

  @@map("users")
}
